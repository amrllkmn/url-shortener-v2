//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use sea_orm::entity::prelude::*;
use sea_orm::Set;
use serde::{Serialize, Deserialize};
use super::super::utils::generate;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "url")]
pub struct Model {
    #[sea_orm(primary_key)]
    #[serde(skip_deserializing)] // So that it stops looking for id in the json payload
    pub id: i32,
    pub url: String,
    pub title: String,
    pub slug: String,
    #[serde(skip_deserializing)] // Stop looking for created_at
    pub created_at: DateTime,
    #[serde(skip_deserializing)] // Stop looking for updated_at
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {
    fn before_save<'life0,'async_trait,C, >(self,db: &'life0 C,insert:bool) ->  core::pin::Pin<Box<dyn core::future::Future<Output = Result<Self,DbErr> > + core::marker::Send+'async_trait> >where C:ConnectionTrait,C:'async_trait+ ,'life0:'async_trait,Self: core::marker::Send+'async_trait {
        println!("Checking slug before insertion...");
        Box::pin(async move {
            // Check if the slug column is empty
            if (*self.slug.as_ref()).is_empty() {
                let random_str = generate(5);
                let model = Self {
                    url: self.url,
                    slug: Set(random_str),
                    title: self.title,
                    ..Default::default()
                };
                println!("Data inserted: {insert}");
                Ok(model)
            } else {
                // Continue with the save operation
                Ok(self)
            }
        })
    }
}
